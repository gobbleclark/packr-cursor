"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/chat/page",{

/***/ "(app-pages-browser)/./src/lib/message-parser.ts":
/*!***********************************!*\
  !*** ./src/lib/message-parser.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   detectActionIntent: function() { return /* binding */ detectActionIntent; },\n/* harmony export */   generateSystemResponse: function() { return /* binding */ generateSystemResponse; },\n/* harmony export */   parseMessage: function() { return /* binding */ parseMessage; }\n/* harmony export */ });\n/**\n * Message Parser Service\n * Detects entities like order numbers, SKUs, tracking numbers in chat messages\n */ /**\n * Order number patterns to detect:\n * - #12345, ##12345 (legacy with hashes - normalize to clean number)\n * - Order 12345, Order #12345\n * - order number 12345\n * - Various formats with letters/numbers\n */ const ORDER_PATTERNS = [\n    // Hash prefix: #12345, ##12345, #ORDER-12345 (normalize by removing hashes)\n    /(?:^|\\s)(#+)([A-Z]*[0-9]{3,}[A-Z0-9]*)/gi,\n    // Order keyword: \"Order 12345\", \"order #12345\", \"order number 12345\"\n    /(?:^|\\s)order\\s*(?:number\\s*)?(#+)?([A-Z0-9]{3,})/gi,\n    // Order ID patterns: \"order id: 12345\"\n    /(?:^|\\s)order\\s*id\\s*:?\\s*(#+)?([A-Z0-9]{3,})/gi,\n    // Standalone numbers that look like orders (5+ digits)\n    /(?:^|\\s)(#+)?([0-9]{5,})/g\n];\n/**\n * SKU patterns to detect:\n * - SKU: ABC123, SKU-ABC123\n * - Product codes\n */ const SKU_PATTERNS = [\n    /(?:^|\\s)SKU\\s*:?\\s*([A-Z0-9\\-_]{3,})/gi,\n    /(?:^|\\s)product\\s*(?:code|id)\\s*:?\\s*([A-Z0-9\\-_]{3,})/gi\n];\n/**\n * Tracking number patterns\n */ const TRACKING_PATTERNS = [\n    /(?:^|\\s)tracking\\s*(?:number|#)?\\s*:?\\s*([A-Z0-9]{8,})/gi,\n    /(?:^|\\s)track\\s*:?\\s*([A-Z0-9]{8,})/gi\n];\n/**\n * Parse a message and extract entities\n */ function parseMessage(content) {\n    const entities = [];\n    const orderNumbers = [];\n    // Detect order numbers\n    ORDER_PATTERNS.forEach((pattern)=>{\n        const matches = [\n            ...content.matchAll(pattern)\n        ];\n        matches.forEach((match)=>{\n            if (match[1]) {\n                const orderNumber = match[1].toUpperCase();\n                const startIndex = match.index + match[0].indexOf(match[1]);\n                entities.push({\n                    type: \"order\",\n                    value: orderNumber,\n                    startIndex,\n                    endIndex: startIndex + match[1].length,\n                    confidence: calculateOrderConfidence(match[0], content)\n                });\n                if (!orderNumbers.includes(orderNumber)) {\n                    orderNumbers.push(orderNumber);\n                }\n            }\n        });\n    });\n    // Detect SKUs\n    SKU_PATTERNS.forEach((pattern)=>{\n        const matches = [\n            ...content.matchAll(pattern)\n        ];\n        matches.forEach((match)=>{\n            if (match[1]) {\n                entities.push({\n                    type: \"sku\",\n                    value: match[1].toUpperCase(),\n                    startIndex: match.index + match[0].indexOf(match[1]),\n                    endIndex: match.index + match[0].indexOf(match[1]) + match[1].length,\n                    confidence: 0.9\n                });\n            }\n        });\n    });\n    // Detect tracking numbers\n    TRACKING_PATTERNS.forEach((pattern)=>{\n        const matches = [\n            ...content.matchAll(pattern)\n        ];\n        matches.forEach((match)=>{\n            if (match[1]) {\n                entities.push({\n                    type: \"tracking\",\n                    value: match[1].toUpperCase(),\n                    startIndex: match.index + match[0].indexOf(match[1]),\n                    endIndex: match.index + match[0].indexOf(match[1]) + match[1].length,\n                    confidence: 0.95\n                });\n            }\n        });\n    });\n    // Remove duplicates and sort by confidence\n    const uniqueEntities = entities.filter((entity, index, self)=>index === self.findIndex((e)=>e.type === entity.type && e.value === entity.value)).sort((a, b)=>b.confidence - a.confidence);\n    return {\n        originalContent: content,\n        entities: uniqueEntities,\n        hasOrderNumber: orderNumbers.length > 0,\n        orderNumbers: [\n            ...new Set(orderNumbers)\n        ] // Remove duplicates\n    };\n}\n/**\n * Calculate confidence score for order number detection\n */ function calculateOrderConfidence(match, fullContent) {\n    let confidence = 0.7; // Base confidence\n    // Higher confidence if explicitly mentioned as \"order\"\n    if (/order/i.test(match)) {\n        confidence += 0.2;\n    }\n    // Higher confidence if hash prefix\n    if (match.includes(\"#\")) {\n        confidence += 0.1;\n    }\n    // Context clues in the full message\n    const contextClues = [\n        \"change\",\n        \"update\",\n        \"cancel\",\n        \"modify\",\n        \"edit\",\n        \"ship\",\n        \"address\",\n        \"customer\",\n        \"delivery\",\n        \"tracking\",\n        \"status\",\n        \"problem\",\n        \"issue\"\n    ];\n    if (contextClues.some((clue)=>fullContent.toLowerCase().includes(clue))) {\n        confidence += 0.1;\n    }\n    return Math.min(confidence, 1.0);\n}\n/**\n * Check if a message suggests the user wants to take action on an order\n */ function detectActionIntent(content, entities) {\n    const lowerContent = content.toLowerCase();\n    const actionKeywords = {\n        \"update_address\": [\n            \"address\",\n            \"ship to\",\n            \"shipping\",\n            \"delivery\",\n            \"move\",\n            \"relocate\"\n        ],\n        \"cancel_order\": [\n            \"cancel\",\n            \"stop\",\n            \"halt\",\n            \"abort\",\n            \"remove\"\n        ],\n        \"modify_items\": [\n            \"add\",\n            \"remove\",\n            \"change items\",\n            \"modify\",\n            \"different\",\n            \"swap\"\n        ],\n        \"expedite\": [\n            \"rush\",\n            \"urgent\",\n            \"asap\",\n            \"expedite\",\n            \"faster\",\n            \"priority\"\n        ],\n        \"track_order\": [\n            \"track\",\n            \"status\",\n            \"where is\",\n            \"shipped\",\n            \"delivery\"\n        ],\n        \"contact_customer\": [\n            \"customer\",\n            \"client\",\n            \"contact\",\n            \"call\",\n            \"email\"\n        ]\n    };\n    const suggestedActions = [];\n    let totalConfidence = 0;\n    Object.entries(actionKeywords).forEach((param)=>{\n        let [action, keywords] = param;\n        const matches = keywords.filter((keyword)=>lowerContent.includes(keyword));\n        if (matches.length > 0) {\n            suggestedActions.push(action);\n            totalConfidence += matches.length * 0.2;\n        }\n    });\n    const hasActionIntent = suggestedActions.length > 0 && entities.some((e)=>e.type === \"order\");\n    return {\n        hasActionIntent,\n        suggestedActions,\n        confidence: Math.min(totalConfidence, 1.0)\n    };\n}\n/**\n * Generate a smart response suggestion for the Boxio System bot\n * Note: This generates a basic response. The actual order status will be checked\n * when the bot response is created to show contextual actions.\n */ function generateSystemResponse(parsedMessage) {\n    if (!parsedMessage.hasOrderNumber) {\n        return {\n            shouldRespond: false,\n            response: \"\",\n            actionCards: [],\n            orderNumber: undefined\n        };\n    }\n    const actionIntent = detectActionIntent(parsedMessage.originalContent, parsedMessage.entities);\n    const orderNumber = parsedMessage.orderNumbers[0]; // Use first detected order\n    // Generate basic action cards - these will be refined based on actual order status\n    const baseActionCards = [\n        {\n            action: \"view_order\",\n            label: \"View Order\",\n            icon: \"\\uD83D\\uDC41Ô∏è\"\n        },\n        {\n            action: \"edit_address\",\n            label: \"Edit Shipping Address\",\n            icon: \"\\uD83C\\uDFE0\"\n        },\n        {\n            action: \"edit_carrier\",\n            label: \"Edit Shipping Carrier\",\n            icon: \"\\uD83D\\uDE9A\"\n        },\n        {\n            action: \"track_order\",\n            label: \"Track Package\",\n            icon: \"\\uD83D\\uDCE6\"\n        },\n        {\n            action: \"edit_items\",\n            label: \"Edit Line Items\",\n            icon: \"\\uD83D\\uDCDD\"\n        }\n    ];\n    // If specific intent detected, prioritize those actions\n    if (actionIntent.hasActionIntent) {\n        const intentActionMap = {\n            \"update_address\": \"edit_address\",\n            \"modify_items\": \"edit_items\",\n            \"track_order\": \"track_order\",\n            \"expedite\": \"edit_carrier\"\n        };\n        // Mark matching actions as primary\n        baseActionCards.forEach((card)=>{\n            if (actionIntent.suggestedActions.some((intent)=>intentActionMap[intent] === card.action)) {\n                card.primary = true;\n            }\n        });\n    }\n    return {\n        shouldRespond: true,\n        response: \"I can help you with order #\".concat(orderNumber, \"! What would you like to do?\"),\n        actionCards: baseActionCards,\n        orderNumber\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/message-parser.ts\n"));

/***/ })

});