"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/chat/page",{

/***/ "(app-pages-browser)/./src/hooks/useSystemBot.ts":
/*!***********************************!*\
  !*** ./src/hooks/useSystemBot.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSystemBot: function() { return /* binding */ useSystemBot; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_message_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/message-parser */ \"(app-pages-browser)/./src/lib/message-parser.ts\");\n/* harmony import */ var _lib_order_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/order-service */ \"(app-pages-browser)/./src/lib/order-service.ts\");\n\n\n\nfunction useSystemBot() {\n    const [botResponses, setBotResponses] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        // Load bot responses from localStorage on initialization\n        if (true) {\n            try {\n                const saved = localStorage.getItem(\"systemBotResponses\");\n                if (saved) {\n                    const parsed = JSON.parse(saved);\n                    // Filter out responses older than 24 hours\n                    const oneDayAgo = Date.now() - 24 * 60 * 60 * 1000;\n                    return parsed.filter((response)=>new Date(response.timestamp).getTime() > oneDayAgo);\n                }\n            } catch (error) {\n                console.error(\"Error loading bot responses from localStorage:\", error);\n            }\n        }\n        return [];\n    });\n    const processMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (content, messageId, currentUser, room)=>{\n        console.log(\"\\uD83E\\uDD16 Processing message:\", content, \"messageId:\", messageId);\n        // Parse the message for entities\n        const parsedMessage = (0,_lib_message_parser__WEBPACK_IMPORTED_MODULE_1__.parseMessage)(content);\n        console.log(\"\\uD83D\\uDCDD Parsed message:\", parsedMessage);\n        // Generate system response if needed\n        const systemResponse = (0,_lib_message_parser__WEBPACK_IMPORTED_MODULE_1__.generateSystemResponse)(parsedMessage);\n        console.log(\"\\uD83C\\uDFAF System response:\", systemResponse);\n        if (systemResponse.shouldRespond && systemResponse.orderNumber) {\n            const botResponseId = \"bot_\".concat(messageId, \"_\").concat(Date.now());\n            // Get 3PL name from current user or room\n            const threeplName = (currentUser === null || currentUser === void 0 ? void 0 : currentUser.companyName) || (room === null || room === void 0 ? void 0 : room.threeplName) || \"Support\";\n            // Create initial bot response with loading state\n            const initialBotResponse = {\n                id: botResponseId,\n                messageId,\n                message: systemResponse.response,\n                actionCards: systemResponse.actionCards,\n                orderNumber: systemResponse.orderNumber,\n                threeplName,\n                timestamp: new Date(),\n                loading: true\n            };\n            setBotResponses((prev)=>[\n                    ...prev,\n                    initialBotResponse\n                ]);\n            // Fetch contextual actions based on order status\n            try {\n                const contextualActions = await _lib_order_service__WEBPACK_IMPORTED_MODULE_2__.orderService.getContextualActions(systemResponse.orderNumber, systemResponse.actionCards);\n                // Get order status for customer name and updated message\n                const orderStatus = await _lib_order_service__WEBPACK_IMPORTED_MODULE_2__.orderService.getOrderStatus(systemResponse.orderNumber);\n                console.log(\"\\uD83D\\uDCE6 Order status:\", orderStatus);\n                // Create updated message with customer name if available\n                const updatedMessage = (orderStatus === null || orderStatus === void 0 ? void 0 : orderStatus.customerName) ? \"I can help you with order #\".concat(systemResponse.orderNumber, \" for \").concat(orderStatus.customerName, \"! What would you like to do?\") : \"I can help you with order #\".concat(systemResponse.orderNumber, \"! What would you like to do?\");\n                // Update bot response with contextual actions and customer info\n                setBotResponses((prev)=>prev.map((response)=>response.id === botResponseId ? {\n                            ...response,\n                            message: updatedMessage,\n                            actionCards: contextualActions,\n                            customerName: orderStatus === null || orderStatus === void 0 ? void 0 : orderStatus.customerName,\n                            loading: false\n                        } : response));\n            } catch (error) {\n                console.error(\"Error fetching contextual actions:\", error);\n                // Remove loading state even if there's an error\n                setBotResponses((prev)=>prev.map((response)=>response.id === botResponseId ? {\n                            ...response,\n                            loading: false\n                        } : response));\n            }\n            return initialBotResponse;\n        }\n        return null;\n    }, []);\n    const dismissBotResponse = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((botResponseId)=>{\n        setBotResponses((prev)=>prev.filter((response)=>response.id !== botResponseId));\n    }, []);\n    const clearAllBotResponses = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setBotResponses([]);\n    }, []);\n    const handleBotAction = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((action, orderNumber)=>{\n        console.log(\"Bot action triggered:\", {\n            action,\n            orderNumber\n        });\n        // Here we'll implement the actual action handling\n        switch(action){\n            case \"view_order\":\n                // Navigate to order details or show order modal\n                console.log(\"Viewing order \".concat(orderNumber));\n                break;\n            case \"edit_address\":\n                // Show address update modal\n                console.log(\"Editing shipping address for order \".concat(orderNumber));\n                break;\n            case \"edit_carrier\":\n                // Show carrier selection modal\n                console.log(\"Editing shipping carrier for order \".concat(orderNumber));\n                break;\n            case \"track_order\":\n                // Show tracking information\n                console.log(\"Tracking order \".concat(orderNumber));\n                break;\n            case \"edit_items\":\n                // Show item modification interface\n                console.log(\"Editing line items for order \".concat(orderNumber));\n                break;\n            default:\n                console.log(\"Unknown action: \".concat(action));\n        }\n    }, []);\n    return {\n        botResponses,\n        processMessage,\n        dismissBotResponse,\n        clearAllBotResponses,\n        handleBotAction\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useSystemBot.ts\n"));

/***/ })

});